library(mixingsimulation)
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
mu <- 100
sigma <- 0.8
alpha <- c(0.1,10)
k <- c(30,30)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
n_sim_df <-data.frame(n_simulations = c(1:n_sim))
Prob_df <- cbind.data.frame(n_sim_df,sim_multiple(mu, sigma, alpha, k, distribution, n_sim))
melten.Prob <- reshape2::melt(Prob_df, id = "n_simulations", variable.name = "mixing_scheme",
value.name = "Total_CFU")
plot_example <- ggplot2::ggplot(melten.Prob) + ggplot2::geom_point(ggplot2::aes(x = n_simulations,
y = Total_CFU, group = mixing_scheme, colour = mixing_scheme))+
ggplot2::xlab(expression("Number of simulations"))+ ggplot2::theme_classic()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),legend.position = c(0.70,0.90),
legend.box.background = ggplot2::element_rect(),legend.box.margin = ggplot2::margin(1,1,1,1))+
ggplot2::ylab(expression("Total number of CFU"))+
ggthemes::scale_colour_colorblind()
print(plot_example)
mu <- 100
sigma <- 0.8
alpha <- c(0.1,10)
k <- c(30,30)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
n_sim_df <-data.frame(n_simulations = c(1:n_sim))
Prob_df <- cbind.data.frame(n_sim_df,sim_multiple(mu, sigma, alpha, k, distribution, n_sim))
melten.Prob <- reshape2::melt(Prob_df, id = "n_simulations", variable.name = "mixing_scheme",
value.name = "Total_CFU")
plot_example <- ggplot2::ggplot(melten.Prob) + ggplot2::geom_point(ggplot2::aes(x = n_simulations,
y = Total_CFU, group = mixing_scheme, colour = mixing_scheme))+
ggplot2::xlab(expression("Number of simulations"))+ ggplot2::theme_classic()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),legend.position = c(0.70,0.90),
legend.box.background = ggplot2::element_rect(),legend.box.margin = ggplot2::margin(1,1,1,1))+
ggplot2::ylab(expression("Total number of CFU"))+
ggthemes::scale_colour_colorblind()
print(plot_example)
mu <- 100
sigma <- 0.8
alpha <- c(0.1,10)
k <- c(30,30)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
n_sim_df <-data.frame(n_simulations = c(1:n_sim))
Prob_df <- cbind.data.frame(n_sim_df,sim_multiple(mu, sigma, alpha, k, distribution, n_sim))
melten.Prob <- reshape2::melt(Prob_df, id = "n_simulations", variable.name = "mixing_scheme",
value.name = "Total_CFU")
plot_example <- ggplot2::ggplot(melten.Prob) + ggplot2::geom_point(ggplot2::aes(x = n_simulations,
y = Total_CFU, group = mixing_scheme, colour = mixing_scheme))+
ggplot2::xlab(expression("Number of simulations"))+ ggplot2::theme_classic()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),legend.position = c(0.70,0.90),
legend.box.background = ggplot2::element_rect(),legend.box.margin = ggplot2::margin(1,1,1,1))+
ggplot2::ylab(expression("Total number of CFU"))+
ggthemes::scale_colour_colorblind()
print(plot_example)
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
rm(list = c("compare_mixing", "sim_multiple", "sim_single"))
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
pkgdown::build_site()
library(mixingsimulation)
##' This function provides the graphical displays for a different set of mixing parameters for comparison purpose of mixing schemes with multiple stage of the mixing process.
##' @title The total number of colony-forming units in the mixed sample by the simulation results in the multiple mixing plan with multiple stages of the mixing process.
##' @param mu the average number of colony-forming units in the mixed sample, which is in logarithmic scale if we use a lognormal distribution
##' @param sigma the standard deviation of the colony-forming units in the mixed sample on the logarithmic scale (default value 0.8)
##' @param alpha_in concentration parameter at the initial stage
##' @param k number of small portions/ primary samples
##' @param l number of revolutions/stages
##' @param rate concentration parameter changing rate in the each revolutions
##' @param distribution what suitable distribution type we have employed for simulation such as \code{"Poisson-Type A"} or \code{"Poisson-Type B"} or \code{"Lognormal-Type A"} or \code{"Lognormal-Type B"}
##' @param n_sim number of simulations
##' @return Estimates the total number of CFU in each revolution/stage.
##' @details Let \eqn{N'} be the number of colony-forming units in the mixed sample which is produced by mixing of \eqn{k} primary samples and \eqn{N' = \sum N_i} and \eqn{N_i} be the number of colony-forming units.
##' For this package development, we have employed the notations 'Type-A' and 'Type-B'  to indicate the type of distributions, which are applied in the previous literature as 'fair' and 'beta', respectively; see \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{Nauta (2005)}.
##'
##' This package will consider stage by stage of the mixing process and assume systematically breaking clusters at every stage of the mixing. Therefore it can be assumed the concentration parameter also systematically changing with the concentration of the contribution.
##' @seealso \link{sim_single}
##' @references
##' \itemize{
##' \item Nauta, M.J., 2005. Microbiological risk assessment models for partitioning and mixing during food handling. International Journal of Food Microbiology 100, \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{311-322}.
##' }
##' @examples
##' rate <- 0.01
##' l <- 800
##' mu <- 100
##' sigma <- 0.8
##' alpha_in <- c(0.01,0.01,0.01)
##' k <- c(10,20,30)
##' distribution <- c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
##' n_sim <- 20000
##' colMeans(sim_multiple_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim))
##' @export
sim_multiple_stages <- function(mu, sigma, alpha_in, k, l, rate, distribution, n_sim){
f_spri <- function(mu, k, distribution) {
sprintf("mixing plan (mu = %.1f, k = %.0f, %s)", mu, k, distribution)
}
stages <- 1:l
# sim.sum <- matrix(NA, nrow = n_sim, ncol = length(k))
# for(i in 1:length(k)){
sim.sum3 <- matrix(NA, nrow = l, ncol = length(k))
for(j in 1:length(k)){
sim.sum3[,j] <-  sim_single_stages(mu, sigma, alpha_in[j], k[j], l, rate, distribution[j], n_sim)
}
result <- data.frame(sim.sum3)
colnames(result) <- f_spri(mu, k, distribution)
# result <- data.frame(stages, mean(sim.sum3))
# colnames(result) <- c("stages", f_spri(mu, k, distribution))
return(result)
}
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
library(mixingsimulation)
library(mixingsimulation)
mu <- 100
sigma <- 0.8
alpha_in <- 1
k <- c(10,30,50)
l <- 1000
rate <- 0.01
distribution <- c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
mu <- 100
sigma <- 0.8
alpha_in <- 1
k <- c(10,30,50)
l <- 28000
rate <- 0.01
distribution <- c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
library(mixingsimulation)
mu <- 100
sigma <- 0.8
alpha_in <- 1
k <- c(10,30,50)
l <- 28000
rate <- 0.01
distribution <- c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
library(mixingsimulation)
library(mixingsimulation)
library(remotes)
install.packages("remotes")
library(ggplot2)
install.packages("testthat")
roxygen2::roxygenize(".", roclets="rd")
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
rpolono
VGAM::rpolono
devtools::build_manual(path=getwd())
devtools::build_manual(path=getwd())
devtools::build_manual(path=getwd())
devtools::build_manual(path=getwd())
roxygen2::roxygenize(".", roclets="rd")
devtools::build_manual(path=getwd())
devtools::build_manual(path=getwd())
roxygen2::roxygenize(".", roclets="rd")
devtools::build_manual(path=getwd())
roxygen2::roxygenize(".", roclets="rd")
devtools::build_manual(path=getwd())
roxygen2::roxygenize(".", roclets="rd")
devtools::build_manual(path=getwd())
build_manual(path=getwd())
library(devtools)
library(usethis)
library(devtools)
devtools::build_manual(path=getwd())
library(mixingsimulation)
devtools::build_manual(path=getwd())
devtools::build_manual(path=getwd())
library(mixingsimulation)
library(mixingsimulation)
roxygen2::roxygenize(".", roclets="rd")
devtools::build_manual(path=getwd())
roxygen2::roxygenize(".", roclets="rd")
devtools::build_manual(path=getwd())
shell('R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview')
devtools::build_manual(path=getwd())
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
pkgdown::build_site()
