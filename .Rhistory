melten.Prob <- reshape2::melt(Prob_df, id = "n_simulations", variable.name = "mixing_scheme",
value.name = "Total_CFU")
plot_example <- ggplot2::ggplot(melten.Prob) + ggplot2::geom_point(ggplot2::aes(x = n_simulations,
y = Total_CFU, group = mixing_scheme, colour = mixing_scheme))+
ggplot2::xlab(expression("Number of simulations"))+ ggplot2::theme_classic()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),legend.position = c(0.70,0.90),
legend.box.background = ggplot2::element_rect(),legend.box.margin = ggplot2::margin(1,1,1,1))+
ggplot2::ylab(expression("Total number of CFU"))+
ggthemes::scale_colour_colorblind()
print(plot_example)
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
##' This function provides the graphical displays for a different set of mixing parameters for comparison purpose of mixing schemes with multiple stages of mixing.
##' @title The graphical comparison between different mixing schemes by the simulation results in the mixing process's multiple stages with varying mixing parameters.
##' @param mu the average number of colony-forming units in the mixed sample, which is in logarithmic scale if we use a lognormal distribution
##' @param sigma the standard deviation of the colony-forming units in the mixed sample on the logarithmic scale (default value 0.8)
##' @param alpha_in concentration parameter at the initial stage
##' @param k number of small portions/ primary samples
##' @param l number of revolutions/stages
##' @param rate concentration parameter changing rate in the each revolutions
##' @param distribution what suitable distribution type we have employed for simulation such as \code{"Poisson-Type A"} or \code{"Poisson-Type B"} or \code{"Lognormal-Type A"} or \code{"Lognormal-Type B"}
##' @param n_sim number of simulations
##' @return graphical comparison between different mixing schemes.
##' @details {Let \eqn{N'} be the number of colony-forming units in the mixed sample which is produced by mixing of \eqn{k} primary samples and \eqn{N' = \sum N_i} and \eqn{N_i} be the number of colony-forming units
##' in the \eqn{i^{th}} primary sample; where \eqn{i = 1,2,....k}.
##'
##'
##' For this package development, we have employed the notations 'Type-A' and 'Type-B'  to indicate the type of distributions, which are applied in the previous literature as 'fair' and 'beta', respectively; see \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{Nauta (2005)}. Following \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{Nauta (2005)}, contribution weight of contamination by each primary sample can be defined by the random variable \eqn{w_i}
##' which is possible to be following either uniform distribution with parameter \eqn{1/k} or joint distribution of \eqn{w_1,w_2,\cdots w_k} follows Dirichlet distribution with concentration parameter \eqn{\alpha}.
##' From the previous literature, Dirichlet distribution can be formulated by beta or gamma algorithm which are revealed the same results; see \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{Nauta (2005)}. This function is developed by based on
##' beta algorithm, it is formulated  the following steps.
##' \deqn{w_i = x_i {\prod_{j=1}^{i-1}{1-x_j}}~~~~ \forall i = 2,3,\cdots k} and \eqn{w_1=x_1};
##'
##' where \eqn{x_i} follows \eqn{Beta (\alpha,\alpha(k-i))} and also \eqn{\sum w_i} must be equal to one.
##' \itemize{
##' \item Case 1 (Poisson-Type A): \eqn{N_i} follows \eqn{Poisson(\mu/k)}
##' \item Case 2 (Poisson-Type B): \eqn{N_i} follows \eqn{Poisson(\mu*w_i)}
##' \item Case 3 (Lognormal-Type A): \eqn{N_i} follows \eqn{Binomial(M_i,1/k)}; where  \eqn{M_i} follows \eqn{Lognormal(\mu, \sigma)}
##' \item Case 4 (Lognormal-Type B): \eqn{N_i}  follows \eqn{Binomial(M_i,w_i)}; where  \eqn{M_i} follows \eqn{Lognormal(\mu, \sigma)}
##' }}
##'
##' The powder mixing process can be defined as breaking clusters stage by stage. Usually, it will be occurring systematically in the standard powder mixtures. For this package development, we assume that mixing parameters also systematically changing with fixed rate in the each stage of the mixing.
##' The mixing parameter can be defined as revolutions instead of mixing stage in general. Due to the lack of theoretical results to the dependent random variable sum's distribution, we have chosen simulation techniques for this modelling.
##'
##' Let \eqn{l} be the number of stages or revolution of the mixture, and also we assumed a fixed concentration parameter value at the initial phase of the mixing process. Based on the literature in this area, the concentration parameter can be assumed that increasing at every stage of the mixing, which is possible to be systematically. Therefore this function exhibits the graphical display with different quantities of primary sample mixing as a large unit.
##' @seealso  \link{sim_single}, \link{sim_single_stages}, \link{sim_multiple_stages}
##' @references
##' \itemize{
##' \item Nauta, M.J., 2005. Microbiological risk assessment models for partitioning and mixing during food handling. International Journal of Food Microbiology 100, \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{311-322}.
##' }
##' @examples
##' mu <- c(100,100,100)
##' sigma <- 0.8
##' alpha_in <- 1
##' k <- c(10,30,50)
##' l <- 500
##' rate <- 0.01
##' distribution <- c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
##' n_sim <- 20000
##' compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
##' @export
compare_mixing_stages <- function(mu, sigma, alpha_in, k, l, rate, distribution, n_sim){
Total_CFU <- NULL
mixing_scheme <- NULL
f_spri <- function(mu, k, distribution) {
sprintf("mixing plan (mu = %.1f, k = %.0f, %s)", mu, k, distribution)
}
f_spr <- function(l) {
sprintf("Simulation results (no.revolutions = %.0f)", l)
}
stages <- 1:l
sim.sum3 <- matrix(NA, nrow = l, ncol = length(distribution))
for(j in 1:length(distribution)){
sim.sum3[,j] <-  sim_single_stages(mu[j], sigma , alpha_in, k[j], l, rate, distribution[j], n_sim)
}
result <- data.frame(stages, sim.sum3)
colnames(result) <- c("stages", f_spri(mu, k, distribution))
# return(result)
melten.Prob <- reshape2::melt(result, id = "stages", variable.name = "mixing_scheme", value.name = "Total_CFU")
# ggplot2::ggplot(df, aes(Total_CFU)) + stat_ecdf(geom = "point")+ theme_classic()
plot1 <- ggplot2::ggplot(melten.Prob, ggplot2::aes(Total_CFU, group = mixing_scheme, colour = mixing_scheme)) + ggplot2::stat_ecdf(geom = "step") + ggplot2::ylab(expression("Cumulative probability of N'"))+
ggplot2::theme_classic()+ ggplot2::xlab(expression("Total CFU after mixing (N')"))+ ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), legend.position = c(0.70,0.25))+
ggplot2::ggtitle(label = f_spr(l))+ ggthemes::scale_colour_colorblind()
# + ggplot2::theme(plot.title = element_text(hjust = 0.5))
# cat("Calculation took", proc.time()[1], "seconds.\n")
return(plot1)
}
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
mu <- c(100,100)
sigma <- 0.8
alpha <- c(0.1,10)
k <- c(10,10)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
n_sim_df <-data.frame(n_simulations = c(1:n_sim))
Prob_df <- cbind.data.frame(n_sim_df,sim_multiple(mu, sigma, alpha, k, distribution, n_sim))
melten.Prob <- reshape2::melt(Prob_df, id = "n_simulations", variable.name = "mixing_scheme",
value.name = "Total_CFU")
plot_example <- ggplot2::ggplot(melten.Prob) + ggplot2::geom_point(ggplot2::aes(x = n_simulations,
y = Total_CFU, group = mixing_scheme, colour = mixing_scheme))+
ggplot2::xlab(expression("Number of simulations"))+ ggplot2::theme_classic()+
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),legend.position = c(0.70,0.90),
legend.box.background = ggplot2::element_rect(),legend.box.margin = ggplot2::margin(1,1,1,1))+
ggplot2::ylab(expression("Total number of CFU"))+
ggthemes::scale_colour_colorblind()
print(plot_example)
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
mu <- c(100,100)
sigma <- 0.8
alpha <- c(0.1,10)
k <- c(10,10)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
n_sim <- 2000
n_sim_df <-data.frame(n_simulations = c(1:n_sim))
Prob_df <- cbind.data.frame(n_sim_df,sim_multiple(mu, sigma, alpha, k, distribution, n_sim))
Prob_df
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
library(mixingsimulation)
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
mu <- 100
sigma <- 0.8
alpha_in <- 0.01
k <- 30
l <- 500
rate <- 0.01
distribution <-  "Lognormal-Type B"
n_sim <- 2000
n_sim_df <-data.frame(n_stages = c(1:l))
Prob_df <- cbind.data.frame(n_sim_df, sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
Prob_df
plot(Prob_df)
Prob_df <- cbind.data.frame(n_sim_df, Total_CFU = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
ggplot2::ggplot(Prob_df) + ggplot2::geom_point(ggplot2::aes(x = n_stages,
y = Total_CFU))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = n_stages,
y = Total_CFU))
Prob_df
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = n_stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = n_stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
n_sim_df <-data.frame(n_stages = c(1:l))
Total_CFU <-  data.frame(sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
Prob_df <- cbind.data.frame(n_sim_df, Total_CFU)
Prob_df
Total_CFU
n_sim_df <-data.frame(n_stages = c(1:l))
plot(sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
Total_CFU  <-  sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)
Total_CFU
no.stages <-c(1:l)
data.frame(no.stages,Total_CFU)
Prob_df <- cbind.data.frame(no.stages, Total_CFU = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
Prob_df
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = n_stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))) + ggplot2::xlab(expression("Number of stages"))+ggplot2::ylab(expression("Total number of CFU (N')"))+ ggplot2::theme_classic()
plot_example <- ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))) + ggplot2::xlab(expression("Number of stages"))+ggplot2::ylab(expression("Total number of CFU (N')"))+ ggplot2::theme_classic()
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))) + ggplot2::xlab(expression("Number of stages"))+ggplot2::ylab(expression("Total number of CFU"))+ ggplot2::theme_classic()
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))) + ggplot2::xlab(expression("Number of stages"))+ggplot2::ylab(expression("Total number of CFU"))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))) + ggplot2::xlab(expression("Number of stages"))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
no.stages <-c(1:l)
Prob_df <- cbind.data.frame(no.stages, sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
plot_example <- ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
plot_example <- ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))) + ggplot2::xlab(expression("Number of stages"))+ ggplot2::ylab(expression("Total number of CFU"))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages,
y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
Prob_df
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
plot_example <- ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
plot_example
mu <- 100
sigma <- 0.8
alpha_in <- 0.01
k <- 30
l <- 500
rate <- 0.01
distribution <-  "Lognormal-Type B"
n_sim <- 2000
Prob_df <- cbind.data.frame(no.stages, sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
plot_example <- ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim)))
plot_example
Prob_df <- cbind.data.frame(no.stages, CFU=sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = CFU))
CFU
Prob_df <- cbind.data.frame(no.stages, sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)))
ggplot2::ggplot(Prob_df,ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)))
Prob_df <- cbind.data.frame(no.stages, sim_single_stages(mu, sigma , alpha_in , k, l, rate, distribution, n_sim))
ggplot2::ggplot(Prob_df,ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)))
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = sim_single_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)))
colnames(Prob_df) <- c("A","B")
Prob_df
colnames(Prob_df) <- c("no.stages","Total number of CFU")
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = Total number of CFU))
colnames(Prob_df) <- c("no.stages","CFU")
ggplot2::ggplot(Prob_df) + ggplot2::geom_line(ggplot2::aes(x = no.stages, y = CFU))
ggplot2::ggplot(Prob_df)
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
roxygen2::roxygenize(".", roclets="rd")
roxygen2::roxygenize(".", roclets="rd")
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
pkgdown::build_site()
devtools::build_manual(path=getwd())
library(mixingsimulation)
devtools::install_github("Mayooran1987/mixingsimulation")
devtools::install_github("Mayooran1987/mixingsimulation")
devtools::install_github("Mayooran1987/mixingsimulation")
install_github("Mayooran1987/mixingsimulation")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("Mayooran1987/mixingsimulation")
install.packages(c("dplyr", "e1071", "formatR", "ipred", "lava", "maptools", "pkgload", "ps", "ragg", "RcppArmadillo", "RCurl", "renv", "sf", "textshaping", "units", "xfun", "XML"))
library(mixingsimulation)
help(package=mixingsimulation)
mu <- c(100,100,100)
sigma <- 0.8
alpha_in <- 1
k <- c(10,30,50)
l <- 800
rate <- 0.01
distribution <-  c("Poisson-Type A","Poisson-Type A","Poisson-Type A")
distribution <-  c("Poisson-Type B","Poisson-Type B","Poisson-Type B")
distribution <-  c("Lognormal-Type A","Lognormal-Type A","Lognormal-Type A")
distribution <-  c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
n_sim <- 20000
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
l <- 100
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
l <- 1000
n_sim <- 2000
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
k <- c(10,10,50)
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
k <- c(10,10,10)
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
mu <- c(100,100,100,100)
sigma <- 0.8
alpha_in <- 1
k <- c(10,10,10)
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
k <- c(10,10,10,20)
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
k
mu
mu <- c(100,100,100,100)
sigma <- 0.8
alpha_in <- 1
k <- c(10,10,10,20)
l <- 1000
rate <- 0.01
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
k <- c(10,20,30,40)
distribution <-  c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
mu <- c(100,100)
sigma <- 0.8
alpha_in <- 1
k <- c(10,20)
l <- 1000
rate <- 0.01
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
mu <- c(100,100,100,100)
sigma <- 0.8
alpha_in <- 1
k <- c(10,20,30,40)
l <- 1000
distribution <-  c("Lognormal-Type B","Lognormal-Type B","Lognormal-Type B","Lognormal-Type B")
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
n_sim <- 200000
compare_mixing_stages(mu, sigma, alpha_in, k, l, rate, distribution, n_sim)
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
pkgdown::build_site()
roxygen2::roxygenize(".", roclets="rd")
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
pkgdown::build_site()
##' This function calculates the resulting total number of colony forming units in the mixed sample in the single mixing plan with single stage of the mixing.
##' @title The total number of colony-forming units in the mixed sample by the simulation results in the single mixing plan with a single stage of the mixing.
##' @param mu the average number of colony-forming units in the mixed sample, which is in logarithmic scale if we use a lognormal distribution
##' @param sigma the standard deviation of the colony-forming units in the mixed sample on the logarithmic scale (default value 0.8)
##' @param alpha concentration parameter
##' @param k number of small portions/ primary samples
##' @param distribution what suitable distribution type we have employed for simulation such as \code{"Poisson-Type A"} or \code{"Poisson-Type B"} or \code{"Lognormal-Type A"} or \code{"Lognormal-Type B"}
##' @param summary if we need to get all simulated \eqn{N'}, use \code{summary = FALSE} otherwise function provides mean value of the simulated \eqn{N'} ( default \code{summary = TRUE}).
##' @param n_sim number of simulations
##' @return total number of colony forming units in the single mixing plan
##' @details Let \eqn{N'} be the number of colony-forming units in the mixed sample which is produced by mixing of \eqn{k} primary samples and \eqn{N' = \sum N_i}.To more details, please refer the details section of  \link{compare_mixing_stages}. (to be finished later on)
##' @seealso  \link{compare_mixing_stages}
##' @references
##' \itemize{
##' \item Nauta, M.J., 2005. Microbiological risk assessment models for partitioning and mixing during food handling. International Journal of Food Microbiology 100, \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{311-322}.
##' }
##' @examples
##' mu <- 100
##' sigma <- 0.8
##' alpha <- 0.1
##' k <- 30
##' n_sim <- 200000
##' sim_single(mu, sigma, alpha, k, distribution = "Lognormal-Type B", n_sim)
##' @export
sim_single <- function(mu, sigma , alpha , k, distribution, n_sim, summary = TRUE){
if (distribution == "Poisson-Type A") {
sim <-  matrix(NA, nrow = n_sim, ncol = k)
# for (i in 1:n_sim){
for(j in 1:k){
sim[,j] <- stats::rpois(n_sim, mu/k)
}
# }
} else if (distribution == "Poisson-Type B") {
# x <- matrix(stats::rgamma(k,alpha), ncol = k, nrow = 1)
# sm <- x%*%rep(1, k)
# w <- x/as.vector(sm)
x <-  matrix(NA, nrow = 1, ncol = k) # to apply a beta algorithm to generate Dirichlet distribution's random numbers.
for (j in 1:k){
x[,j] <- stats::rbeta(1,alpha, alpha*(k-j))
}
w <-  matrix(NA, nrow = 1, ncol = k)
for (j in 2:k){
w[,1] <- x[,1]
w[,j] <- x[j] %*% prod(1 - x[1:(j-1)])
}
# sum(w)
sim <-  matrix(NA, nrow = n_sim, ncol = k)
# for (i in 1:n_sim){
for(j in 1:k){
sim[,j] <- stats::rpois(n_sim, mu*w[,j])
}
# }
} else if (distribution == "Lognormal-Type A") {
M <- matrix(NA, ncol = k, nrow = 1)
for(j in 1:k){
# M[,j] <- as.integer(stats::rnorm(1,  mu, sigma)) # normal distribution
M[,j] <- as.integer(stats::rlnorm(1, meanlog = log(mu), sdlog = sigma)) # lognormal distribution
# M[,j] <- as.integer(VGAM::rpolono(1, meanlog = log(mu), sdlog =sigma)) # poisson lognormal distribution
}
sim <-  matrix(NA, nrow = n_sim, ncol = k)
# for(i in 1:n_sim){
for (j in 1:k){
sim[,j] <- stats::rbinom(n_sim, M[,j], 1/k)
}
# }
} else if (distribution == "Lognormal-Type B") {
# If we want to apply a gamma algorithm to generate Dirichlet distribution's random numbers.
# x <- matrix(stats::rgamma(k,alpha), ncol = k, nrow = 1)
# sm <- x%*%rep(1, k)
# w <- x/as.vector(sm)
x <-  matrix(NA, nrow = 1, ncol = k) # If we want to apply a beta algorithm to generate Dirichlet distribution's random numbers.
for (j in 1:k){
x[,j] <- stats::rbeta(1,alpha, alpha*(k-j))
}
w <-  matrix(NA, nrow = 1, ncol = k)
for (j in 2:k){
w[,1] <- x[,1]
w[,j] <- x[j] %*% prod(1 - x[1:(j-1)])
}
# sum(w)
M <- matrix(NA, ncol = k, nrow = 1)
for(j in 1:k){
# M[,j] <- as.integer(stats::rnorm(1,  mu, sigma)) # normal distribution
M[,j] <- as.integer(stats::rlnorm(1, meanlog = log(mu), sdlog = sigma)) # lognormal distribution
# M[,j] <- as.integer(VGAM::rpolono(1, meanlog = log(mu), sdlog =sigma)) # poisson lognormal distribution
}
# M <- matrix(as.integer(stats::rlnorm(k, meanlog = log(mu), sdlog = sigma)), ncol = k, nrow = 1)
sim <-  matrix(NA, nrow = n_sim, ncol = k)
# for (i in 1:n_sim){
for(j in 1:k){
sim[,j] <- stats::rbinom(n_sim, M[,j], w[,j])
}
# }
} else {
print("please choose the one of the given distribution type with case sensitive such as 'Poisson-Type A' or 'Poisson-Type B' or 'Lognormal-Type A' or 'Lognormal-Type B'")
}
if (summary == TRUE){
result <- sum(apply(sim, 2, mean))
#   St.D_N <- sqrt(sum(apply(sim, 2, var)))
#   result <- data.frame(mean_N,St.D_N)
} else {
# result<- rowSums(sim)
result <-  apply(sim, 1, sum)
}
# cat("Calculation took", proc.time()[1], "seconds.\n")
return(result)
}
##' This function calculates the resulting total number of colony forming units in the mixed sample in the multiple mixing plans at the single stage of the mixing process.
##' @title The total number of colony-forming units in the mixed sample by the simulation results in the multiple mixing plan with varying mixing parameters.
##' @param mu the average number of colony-forming units in the mixed sample, which is in logarithmic scale if we use a lognormal distribution
##' @param sigma the standard deviation of the colony-forming units in the mixed sample on the logarithmic scale (default value 0.8)
##' @param alpha concentration parameter
##' @param k number of small portions/ primary samples
##' @param distribution what suitable distribution type we have employed for simulation such as \code{"Poisson-Type A"} or \code{"Poisson-Type B"} or \code{"Lognormal-Type A"} or \code{"Lognormal-Type B"}
##' @param n_sim number of simulations
##' @return total number of colony forming units in the multiple mixing scheme
##' @details Let \eqn{N'} be the number of colony-forming units in the mixed sample which is produced by contribution of \eqn{k} primary samples mixing and \eqn{N' = \sum N_i}. To more details, please refer the details section of  \link{compare_mixing_stages}.
##' @seealso \link{sim_single}, \link{compare_mixing_stages}
##' @references
##' \itemize{
##' \item Nauta, M.J., 2005. Microbiological risk assessment models for partitioning and mixing during food handling. International Journal of Food Microbiology 100, \href{https://doi.org/10.1016/j.ijfoodmicro.2004.10.027}{311-322}.
##' }
##' @examples
##' mu <- 100
##' sigma <- 0.8
##' alpha <- c(0.1,10)
##' k <- c(10,10)
##' distribution <-  c("Lognormal-Type B","Lognormal-Type B")
##' n_sim <- 200000
##' n_sim_df <-data.frame(n_simulations = c(1:n_sim))
##' Prob_df <- cbind.data.frame(n_sim_df,sim_multiple(mu, sigma, alpha, k, distribution, n_sim))
##' melten.Prob <- reshape2::melt(Prob_df, id = "n_simulations", variable.name = "mixing_scheme",
##' value.name = "Total_CFU")
##' plot_example <- ggplot2::ggplot(melten.Prob) + ggplot2::geom_point(ggplot2::aes(x = n_simulations,
##' y = Total_CFU, group = mixing_scheme, colour = mixing_scheme))+
##' ggplot2::xlab(expression("Number of simulations"))+ ggplot2::theme_classic()+
##' ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),legend.position = c(0.70,0.90),
##' legend.box.background = ggplot2::element_rect(),legend.box.margin = ggplot2::margin(1,1,1,1))+
##' ggplot2::ylab(expression("Total number of CFU"))+
##' ggthemes::scale_colour_colorblind()
##' print(plot_example)
##' @export
sim_multiple <- function(mu, sigma, alpha, k, distribution, n_sim){
f_spri <- function(mu, k, alpha, distribution) {
sprintf("mixing plan (mu = %.1f, k = %.0f, alpha = %.1f, %s)", mu, k, alpha, distribution)
}
if (length(mu)!=length(k)) {
warning("length of alpha and length of k are must be equal")
} else {
sim.sum1 <- matrix(NA, nrow = n_sim, ncol = length(k))
for(j in 1:length(k)){
sim.sum1[,j] <-  sim_single(mu, sigma, alpha[j], k[j], distribution[j], n_sim, summary = FALSE)
}
}
result <- data.frame(sim.sum1)
colnames(result) <- f_spri(mu, k, alpha, distribution)
# cat("Calculation took", proc.time()[1], "seconds.\n")
return(result)
}
mu <- 100
sigma <- 0.8
alpha <- c(0.1,10)
k <- c(10,10)
distribution <-  c("Lognormal-Type B","Lognormal-Type B")
n_sim <- 200000
sim_multiple(mu, sigma, alpha, k, distribution, n_sim)
sim_multiple <- function(mu, sigma, alpha, k, distribution, n_sim){
f_spri <- function(mu, k, alpha, distribution) {
sprintf("mixing plan ( k = %.0f, alpha = %.1f, %s)",  k, alpha, distribution)
}
if (length(mu)!=length(k)) {
warning("length of alpha and length of k are must be equal")
} else {
sim.sum1 <- matrix(NA, nrow = n_sim, ncol = length(k))
for(j in 1:length(k)){
sim.sum1[,j] <-  sim_single(mu, sigma, alpha[j], k[j], distribution[j], n_sim, summary = FALSE)
}
}
result <- data.frame(sim.sum1)
colnames(result) <- f_spri(mu, k, alpha, distribution)
# cat("Calculation took", proc.time()[1], "seconds.\n")
return(result)
}
sim_multiple(mu, sigma, alpha, k, distribution, n_sim)
sim_multiple <- function(mu, sigma, alpha, k, distribution, n_sim){
f_spri <- function(mu, k, alpha, distribution) {
sprintf("mixing plan (mu = %.1f, k = %.0f, alpha = %.1f, %s)", mu, k, alpha, distribution)
}
if (length(alpha)!=length(k)) {
warning("length of alpha and length of k are must be equal")
} else {
sim.sum1 <- matrix(NA, nrow = n_sim, ncol = length(k))
for(j in 1:length(k)){
sim.sum1[,j] <-  sim_single(mu, sigma, alpha[j], k[j], distribution[j], n_sim, summary = FALSE)
}
}
result <- data.frame(sim.sum1)
colnames(result) <- f_spri(mu, k, alpha, distribution)
# cat("Calculation took", proc.time()[1], "seconds.\n")
return(result)
}
sim_multiple(mu, sigma, alpha, k, distribution, n_sim)
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
pkgdown::build_site()
library(mixingsimulation)
devtools::build_manual(path=getwd())
devtools::install_github("Mayooran1987/mixingsimulation")
devtools::install_github("Mayooran1987/mixingsimulation")
roxygen2::roxygenize(".", roclets="rd")
library(mixingsimulation)
